// <auto-generated />
using System;
using CompanyAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241029022425_UpdateModelCreating")]
    partial class UpdateModelCreating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyAPI.ViewModel.AreaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<double>("Expense")
                        .HasColumnType("float");

                    b.Property<string>("NameArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.BranchModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<double>("Expense")
                        .HasColumnType("float");

                    b.Property<string>("HeadOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.CompanyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Expense")
                        .HasColumnType("float");

                    b.Property<double>("MonthyBilling")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.EmployeeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaModelId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("AreaModelId");

                    b.HasIndex("BranchModelId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.EquipmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaModelId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("AreaModelId");

                    b.HasIndex("BranchModelId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.AreaModel", b =>
                {
                    b.HasOne("CompanyAPI.ViewModel.BranchModel", "LinkedBranch")
                        .WithMany("Areas")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedBranch");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.BranchModel", b =>
                {
                    b.HasOne("CompanyAPI.ViewModel.CompanyModel", "CompanyLinked")
                        .WithMany("Branch")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyLinked");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.EmployeeModel", b =>
                {
                    b.HasOne("CompanyAPI.ViewModel.AreaModel", "AreaLinked")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyAPI.ViewModel.AreaModel", null)
                        .WithMany("Employees")
                        .HasForeignKey("AreaModelId");

                    b.HasOne("CompanyAPI.ViewModel.BranchModel", null)
                        .WithMany("Employees")
                        .HasForeignKey("BranchModelId");

                    b.Navigation("AreaLinked");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.EquipmentModel", b =>
                {
                    b.HasOne("CompanyAPI.ViewModel.AreaModel", "AreaLinked")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyAPI.ViewModel.AreaModel", null)
                        .WithMany("Equipments")
                        .HasForeignKey("AreaModelId");

                    b.HasOne("CompanyAPI.ViewModel.BranchModel", null)
                        .WithMany("Equipments")
                        .HasForeignKey("BranchModelId");

                    b.Navigation("AreaLinked");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.AreaModel", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.BranchModel", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Employees");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("CompanyAPI.ViewModel.CompanyModel", b =>
                {
                    b.Navigation("Branch");
                });
#pragma warning restore 612, 618
        }
    }
}
